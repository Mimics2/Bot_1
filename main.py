import telebot
from telebot import types
import sqlite3
import time

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
BOT_TOKEN = "8335870133:AAElDxFGCpn55PY8of1oSkAOEq8KsYFfdqM" 

# –°–ø–∏—Å–æ–∫ ID –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
# –í–ê–ñ–ù–û: ID –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å '-100'
CHANNELS = [
    -1003185824824  # ID –≤—Ç–æ—Ä–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    # –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤, —Å–∫–æ–ª—å–∫–æ –≤–∞–º –Ω—É–∂–Ω–æ
]

# –°—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
# –í–ê–ñ–ù–û: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–æ–π –∂–µ –ø–æ—Ä—è–¥–æ–∫, –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ CHANNELS
INVITE_LINKS = [
    https://t.me/+1FcsEhNqTnAxMWVi   # –°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    # –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
]

# –°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ—Å—É—Ä—Å
ACCESS_LINK = "https://t.me/+AbcDefGhiJkLmNoPqRs"

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS = [6646433980]  # –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ —Å–≤–æ–∏ ID!

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = telebot.TeleBot(BOT_TOKEN)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
def init_db():
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS referrals (
            id INTEGER PRIMARY KEY,
            title TEXT,
            url TEXT
        )
    """)
    conn.commit()
    conn.close()

def add_user_to_db(user_id):
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()
    conn.close()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ---
def check_subscription(user_id):
    for channel_id in CHANNELS:
        try:
            member = bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    return True

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@bot.message_handler(commands=['start'])
def start_handler(message):
    add_user_to_db(message.from_user.id)
    is_subscribed = check_subscription(message.from_user.id)

    if is_subscribed:
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! ‚úÖ\n\n"
            f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: {ACCESS_LINK}",
            parse_mode='HTML'
        )
    else:
        conn = sqlite3.connect('bot_data.db')
        cursor = conn.cursor()
        cursor.execute("SELECT title, url FROM referrals")
        referrals = cursor.fetchall()
        conn.close()
        
        keyboard = types.InlineKeyboardMarkup()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º INVITE_LINKS –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        for i, link in enumerate(INVITE_LINKS):
            keyboard.add(types.InlineKeyboardButton(text=f"–ö–∞–Ω–∞–ª {i+1}", url=link))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if referrals:
            for title, url in referrals:
                keyboard.add(types.InlineKeyboardButton(text=title, url=url))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
        keyboard.add(types.InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_channels"))

        bot.send_message(
            message.chat.id,
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å" ---
@bot.callback_query_handler(func=lambda call: call.data == "check_channels")
def check_channels_callback(call):
    is_subscribed = check_subscription(call.from_user.id)
    
    if is_subscribed:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! ‚úÖ\n\n"
            f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: {ACCESS_LINK}",
            parse_mode='HTML'
        )
    else:
        bot.answer_callback_query(call.id, "–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.", show_alert=True)

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@bot.message_handler(commands=['admin_panel'], func=lambda message: message.from_user.id in ADMINS)
def admin_panel(message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast"))
    keyboard.add(types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏", callback_data="manage_referrals"))

    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

# --- –†–∞—Å—Å—ã–ª–∫–∞ ---
@bot.callback_query_handler(func=lambda call: call.data == "broadcast")
def start_broadcast(call):
    bot.send_message(
        call.message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞."
    )
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º register_next_step_handler –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.register_next_step_handler(call.message, send_broadcast)

def send_broadcast(message):
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    users = [row[0] for row in cursor.fetchall()]
    conn.close()
    
    sent_count = 0
    blocked_count = 0
    for user_id in users:
        try:
            bot.copy_message(chat_id=user_id, from_chat_id=message.chat.id, message_id=message.message_id)
            sent_count += 1
            time.sleep(0.05) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram
        except telebot.apihelper.ApiTelegramException as e:
            if 'blocked by the user' in str(e):
                blocked_count += 1
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        except Exception as e:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    bot.send_message(
        message.chat.id,
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {blocked_count}"
    )

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ ---
@bot.callback_query_handler(func=lambda call: call.data == "manage_referrals")
def manage_referrals(call):
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, title FROM referrals")
    referrals = cursor.fetchall()
    conn.close()

    keyboard = types.InlineKeyboardMarkup()
    if referrals:
        for ref_id, title in referrals:
            keyboard.add(types.InlineKeyboardButton(text=f"üóëÔ∏è {title}", callback_data=f"del_ref:{ref_id}"))
    
    keyboard.add(types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É", callback_data="add_referral"))

    bot.send_message(
        call.message.chat.id,
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏:</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ûï, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é.",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("del_ref:"))
def delete_referral(call):
    ref_id = int(call.data.split(":")[1])
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM referrals WHERE id = ?", (ref_id,))
    conn.commit()
    conn.close()
    bot.answer_callback_query(call.id, "–†–µ—Ñ–µ—Ä–∞–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
    manage_referrals(call)

@bot.callback_query_handler(func=lambda call: call.data == "add_referral")
def add_referral_start(call):
    bot.send_message(
        call.message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<code>–ù–∞–∑–≤–∞–Ω–∏–µ | —Å—Å—ã–ª–∫–∞</code>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n<code>–ö–∞–Ω–∞–ª 1 | https://t.me/channel_1</code>",
        parse_mode='HTML'
    )
    bot.register_next_step_handler(call.message, add_referral_data)

def add_referral_data(message):
    try:
        title, url = message.text.split(" | ", 1)
        conn = sqlite3.connect('bot_data.db')
        cursor = conn.cursor()
        cursor.execute("INSERT INTO referrals (title, url) VALUES (?, ?)", (title, url,))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, "‚úÖ –ù–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except ValueError:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ | —Å—Å—ã–ª–∫–∞")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    init_db()
    bot.polling(none_stop=True)
