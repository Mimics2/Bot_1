# handlers.py

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ config
from config import (
    logger, CHOOSING_ACTION, CHOOSING_THEME, CHOOSING_GENRE, 
    GETTING_TOPIC, GETTING_CORRECTION, GETTING_ACCESS_CODE,
    main_keyboard, theme_keyboard, genre_keyboard
)
from ai_service import MASTER_PROMPT, call_gemini_api
# üî• –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê –õ–û–ì–ò–ö–ê –° –õ–ò–ú–ò–¢–ê–ú–ò/–ü–û–°–¢–û–Ø–ù–ù–´–ú –•–†–ê–ù–ï–ù–ò–ï–ú –î–ê–ù–ù–´–•
from payment_service import check_access, handle_access_code, USERS_DATA, save_users_data 


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ò–ê–õ–û–ì–ê ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}")
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CopiBot –Ω–∞ –±–∞–∑–µ Gemini! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(main_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return CHOOSING_ACTION

async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä '–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç' –∏–ª–∏ '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'."""
    text = update.message.text
    user_id = update.effective_user.id
    
    if not await check_access(user_id, update, context):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥:", reply_markup=ReplyKeyboardRemove())
        return GETTING_ACCESS_CODE
        
    if text == "üÜï –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç":
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞:",
            reply_markup=ReplyKeyboardMarkup(theme_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return CHOOSING_THEME
    
    elif text == "‚öôÔ∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, "
            "–∏ **–ø–æ–¥—Ä–æ–±–Ω–æ —É–∫–∞–∂–∏—Ç–µ**, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove()
        )
        return GETTING_CORRECTION
    
    return CHOOSING_ACTION

async def choose_theme(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –∏ –ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä."""
    text = update.message.text
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": 
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å:",
            reply_markup=ReplyKeyboardMarkup(main_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return CHOOSING_ACTION
    
    context.user_data['theme'] = text
    
    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: *{text}*.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–ª–∏ —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è:",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup(genre_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return CHOOSING_GENRE

async def choose_genre(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–¥—Ç–µ–º—É."""
    text = update.message.text
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞:", 
            reply_markup=ReplyKeyboardMarkup(theme_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return CHOOSING_THEME
        
    context.user_data['genre'] = text
    
    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–∞–Ω—Ä: *{text}*.\n–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **–∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–¥—Ç–µ–º—É**, –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é –∏–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –ø–æ—Å—Ç–∞.",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )
    return GETTING_TOPIC

async def generate_post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç —Å –ø–æ–º–æ—â—å—é Gemini –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    
    user_topic = update.message.text
    theme = context.user_data.get('theme', '–û–±—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è')
    genre = context.user_data.get('genre', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π')
    user_id_str = str(update.effective_user.id)
    
    audience = "–§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∏–∑ –¥–æ–º–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."
    post_length = "–°—Ä–µ–¥–Ω–∏–π (2-3 –∞–±–∑–∞—Ü–∞, —Å –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏)."
    additional_wishes = "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Ç–æ–Ω –∏ –Ω–µ –ø–∏—Å–∞—Ç—å '–∏ –≤–æ—Ç –ø–æ—á–µ–º—É'."

    prompt = MASTER_PROMPT.format(
        user_topic=user_topic,
        theme=theme,
        genre=genre,
        audience=audience,
        post_length=post_length,
        additional_wishes=additional_wishes
    )
    
    await update.message.reply_text("‚úçÔ∏è –í–∞—à –ø–æ—Å—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    result_text = await call_gemini_api(prompt)
    
    # --- –õ–û–ì–ò–ö–ê –°–ü–ò–°–ê–ù–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò ---
    if user_id_str in USERS_DATA and USERS_DATA[user_id_str]['generations_left'] > 0:
        USERS_DATA[user_id_str]['generations_left'] -= 1
        save_users_data(USERS_DATA) 
        
    # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –°–ü–ò–°–ê–ù–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò ---
        
    await update.message.reply_text(
        f"‚úÖ **–ì–û–¢–û–í–´–ô –ü–û–°–¢ ({theme} / {genre})**:\n\n{result_text}",
        parse_mode='Markdown'
    )

    return await start(update, context)

async def correct_post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Gemini."""
    correction_prompt = update.message.text
    user_id_str = str(update.effective_user.id)
    
    prompt = (
        f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É —Ç–µ–∫—Å—Ç–∞, "
        f"–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–ø—Ä–æ—Å –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏: '{correction_prompt}'. "
        f"–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
    )
    
    await update.message.reply_text("üîÑ –í—ã–ø–æ–ª–Ω—è—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é —Ç–µ–∫—Å—Ç–∞...")

    result_text = await call_gemini_api(prompt)

    # --- –õ–û–ì–ò–ö–ê –°–ü–ò–°–ê–ù–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò ---
    if user_id_str in USERS_DATA and USERS_DATA[user_id_str]['generations_left'] > 0:
        USERS_DATA[user_id_str]['generations_left'] -= 1
        save_users_data(USERS_DATA) 
        
    # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –°–ü–ò–°–ê–ù–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò ---
    
    await update.message.reply_text(
        f"‚úÖ **–°–ö–û–†–†–ï–ö–¢–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–ö–°–¢**:\n\n{result_text}",
        parse_mode='Markdown'
    )

    return await start(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text(
        '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß–µ–º —è –º–æ–≥—É –µ—â–µ –ø–æ–º–æ—á—å?',
        reply_markup=ReplyKeyboardMarkup(main_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    context.user_data.clear()
    return CHOOSING_ACTION
