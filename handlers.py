# handlers.py

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
from config import (
    logger, CHOOSING_ACTION, CHOOSING_THEME, CHOOSING_GENRE, 
    GETTING_TOPIC, GETTING_CORRECTION, GETTING_ACCESS_CODE,
    main_keyboard, theme_keyboard, genre_keyboard
)
from ai_service import MASTER_PROMPT, call_gemini_api
# ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑ payment_service
from payment_service import check_access, handle_access_code_flow, USERS_DATA, save_users_data


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ò–ê–õ–û–ì–ê ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –Ω–æ–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."""
    user_name = update.effective_user.first_name if update.effective_user.first_name else "–ì–æ—Å—Ç—å"
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, *{user_name}*! –Ø CopiBot, –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Gemini.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup(main_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return CHOOSING_ACTION

async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç PRO-–¥–æ—Å—Ç—É–ø."""
    text = update.message.text
    user_id = update.effective_user.id
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞": return await cancel(update, context) # –û—Ç–º–µ–Ω–∞
    
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—Å–µ—Ö PRO-—Ñ—É–Ω–∫—Ü–∏–π ---
    if text in ["‚ú® –ù–æ–≤—ã–π –ø–æ—Å—Ç", "‚öôÔ∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"]:
        
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞
        if not await check_access(user_id, update, context):
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:", reply_markup=ReplyKeyboardRemove())
            return GETTING_ACCESS_CODE
        
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        if text == "‚ú® –ù–æ–≤—ã–π –ø–æ—Å—Ç":
            await update.message.reply_text(
                "üöÄ –û—Ç–ª–∏—á–Ω–æ! –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ—Å—å —Å *–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º–æ–π* –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardMarkup(theme_keyboard, one_time_keyboard=True, resize_keyboard=True)
            )
            return CHOOSING_THEME
        
        elif text == "‚öôÔ∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç":
            await update.message.reply_text(
                "üìù –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –∏ **—á–µ—Ç–∫–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ**, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: '–£–ª—É—á—à–∏ —Ç–æ–Ω, —Å–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—á–µ –∏ –¥–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏'.",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
            return GETTING_CORRECTION
            
    elif text == "üîë PRO-–¥–æ—Å—Ç—É–ø":
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "PRO-–¥–æ—Å—Ç—É–ø" - –∑–∞–ø—É—Å–∫–∞–µ–º flow –ø—Ä–æ–≤–µ—Ä–∫–∏/–ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
        return await handle_access_code_flow(update, context)
    
    # –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
    return CHOOSING_ACTION


async def choose_theme(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –∏ –ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä."""
    text = update.message.text
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return await start(update, context) 
    
    context.user_data['theme'] = text
    
    await update.message.reply_text(
        f"–¢–µ–º–∞: *{text}* –≤—ã–±—Ä–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π *–∂–∞–Ω—Ä/—Å—Ç–∏–ª—å*:",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup(genre_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return CHOOSING_GENRE

# ... (choose_genre –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

async def generate_post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç —Å –ø–æ–º–æ—â—å—é Gemini –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω–æ–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    
    # ... (–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö) ...
    
    await update.message.reply_text("‚è≥ –ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 10-20 —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    result_text = await call_gemini_api(MASTER_PROMPT.format(
        user_topic=update.message.text, theme=context.user_data.get('theme', '–û–±—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'), 
        genre=context.user_data.get('genre', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π'), 
        audience="–§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã", post_length="–°—Ä–µ–¥–Ω–∏–π", 
        additional_wishes="–°—Ç–∏–ª—å: —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Å —ç–º–æ–¥–∑–∏."
    ))
    
    # üî• –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–ö–ò –ò–õ–ò –£–°–ü–ï–•–ê
    if result_text.startswith("‚ùå –û–®–ò–ë–ö–ê"):
        await update.message.reply_text(result_text)
    else:
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –≤—ã–≤–æ–¥–∞:
        await update.message.reply_text(
            "üåü *–í–ê–® –ö–û–ù–¢–ï–ù–¢ –ì–û–¢–û–í!* üöÄ\n\n"
            "---"
            f"\n\n{result_text}\n\n"
            "---"
            "\n\n‚úÖ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ.*",
            parse_mode='Markdown'
        )

    return await start(update, context)

# ... (correct_post –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text(
        '‚è∏Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        reply_markup=ReplyKeyboardMarkup(main_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    context.user_data.clear()
    return CHOOSING_ACTION
