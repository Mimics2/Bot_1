# ai_service.py

from google import genai
from google.genai.errors import APIError
# üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π (—Ö–æ—Ç—è –≤ config.py —Å–µ–π—á–∞—Å –æ–¥–∏–Ω, –ª—É—á—à–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è)
from config import GEMINI_API_KEY, logger, GEMINI_API_KEYS
import itertools
import time 

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–µ–π (Round-Robin)
# GEMINI_API_KEYS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ config.py –∫–∞–∫ —Å–ø–∏—Å–æ–∫
try:
    key_cycle = itertools.cycle(GEMINI_API_KEYS)
except NameError:
    # –ï—Å–ª–∏ GEMINI_API_KEYS –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Å–ø–∏—Å–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –∫–ª—é—á
    key_cycle = itertools.cycle([GEMINI_API_KEY])


# –í–∞—à MASTER-–ü–†–û–ú–ü–¢ 
MASTER_PROMPT = """
# MASTER-–ü–†–û–ú–ü–¢: PRO-–ö–û–ü–ò–†–ê–ô–¢–ï–† 5.1
[... (–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞) ...]
"""

async def call_gemini_api(prompt: str, model: str = 'gemini-2.5-flash') -> str:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Gemini API —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π."""
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π (–µ—Å–ª–∏ key_cycle –±—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞)
    if hasattr(key_cycle, 'next'): # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä
        keys = GEMINI_API_KEYS if 'GEMINI_API_KEYS' in globals() else [GEMINI_API_KEY]
    else:
        keys = [GEMINI_API_KEY]
        
    max_retries = len(keys)
    
    for attempt in range(max_retries):
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á 
        current_api_key = next(key_cycle)
        logger.info(f"üîë –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª—é—á, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å {current_api_key[:10]}...")
        
        try:
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º –∫–ª—é—á–æ–º
            client = genai.Client(api_key=current_api_key)
            
            # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ API
            response = client.models.generate_content(
                model=model,
                contents=prompt
            )
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∫–ª—é—á–æ–º {current_api_key[:10]}...")
            return response.text
            
        except APIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API —Å –∫–ª—é—á–æ–º {current_api_key[:10]}...: {e}")
            
            if attempt == max_retries - 1:
                logger.error("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.")
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ –Ω–∞—à–∏ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–æ—à–∏–±–∫–∞ API). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            time.sleep(1) 
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞ API: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞."

    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫."
