import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "YOUR_BOT_TOKEN"
ADMIN_ID = 6646433980  # –í–∞—à ID

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∏–ª–∏ ID –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö.
CHANNELS = {
    "–ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏": "@crypto_news",
    "–¢—Ä–µ–π–¥–∏–Ω–≥ –ª–∏–∫–±–µ–∑": -1001234567890,  # –ü—Ä–∏–º–µ—Ä ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
}

PRIVATE_CHANNEL_LINK = "https://t.me/your_private_channel"  # –í–∞—à–∞ —Å—Å—ã–ª–∫–∞

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    not_subscribed = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
    for channel_name, channel_id in CHANNELS.items():
        try:
            chat_member = await context.bot.get_chat_member(chat_id=channel_id, user_id=user.id)
            if chat_member.status in ["left", "kicked"]:
                not_subscribed.append(channel_name)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_name}: {e}")
            not_subscribed.append(channel_name)

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ - –¥–∞–µ–º —Å—Å—ã–ª–∫—É
    if not not_subscribed:
        keyboard = [[InlineKeyboardButton("üîê –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", url=PRIVATE_CHANNEL_LINK)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª:", reply_markup=reply_markup)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        keyboard = []
        for channel_name, channel_id in CHANNELS.items():
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            if isinstance(channel_id, int) and channel_id < 0:
                invite_link = f"https://t.me/+{abs(channel_id + 1000000000000)}"  # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            else:
                invite_link = f"https://t.me/{channel_id.lstrip('@')}"  # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            keyboard.append([InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: {channel_name}", url=invite_link)])
        
        keyboard.append([InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    if query.data == "check_subscription":
        user = query.from_user
        not_subscribed = []

        for channel_name, channel_id in CHANNELS.items():
            try:
                chat_member = await context.bot.get_chat_member(chat_id=channel_id, user_id=user.id)
                if chat_member.status in ["left", "kicked"]:
                    not_subscribed.append(channel_name)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_name}: {e}")
                not_subscribed.append(channel_name)

        if not_subscribed:
            await query.answer(f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞: {', '.join(not_subscribed)}", show_alert=True)
        else:
            keyboard = [[InlineKeyboardButton("üîê –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", url=PRIVATE_CHANNEL_LINK)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª:", reply_markup=reply_markup)

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.run_polling()

if __name__ == "__main__":
    main()
