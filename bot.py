import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
BOT_TOKEN = "7557745613:AAFTpWsCJ2bZMqD6GDwTynnqA8Nc-mRF1Rs"
admin_id = 6646433980

# –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
PRIVATE_CHANNEL_LINK = "https://t.me/your_private_channel"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–£–Æ –°–°–´–õ–ö–£

# –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
channels_to_subscribe = {
    "–ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª": "@example_channel1",  # –ó–ê–ú–ï–ù–ò–¢–ï
    "–í—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª": -1001234567890,       # –ó–ê–ú–ï–ù–ò–¢–ï
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ========== –ö–û–ú–ê–ù–î–ê /START ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not user:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã
    is_subscribed = True
    not_subscribed_channels = []
    
    for channel_name, channel_id in channels_to_subscribe.items():
        try:
            chat_member = await context.bot.get_chat_member(chat_id=channel_id, user_id=user.id)
            if chat_member.status in ["left", "kicked"]:
                is_subscribed = False
                not_subscribed_channels.append(channel_name)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞ {channel_name}: {e}")
            is_subscribed = False
            not_subscribed_channels.append(channel_name)

    if is_subscribed:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã - –¥–∞–µ–º —Å—Å—ã–ª–∫—É
        keyboard = [
            [InlineKeyboardButton("üîê –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", url=PRIVATE_CHANNEL_LINK)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª:",
            reply_markup=reply_markup
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        keyboard = []
        for channel_name, channel_id in channels_to_subscribe.items():
            if isinstance(channel_id, int) and channel_id < 0:
                invite_link = f"https://t.me/+{abs(channel_id + 1000000000000)}"
            else:
                invite_link = f"https://t.me/{channel_id.lstrip('@')}"
            
            keyboard.append([InlineKeyboardButton(f"üì¢ {channel_name}", url=invite_link)])

        keyboard.append([InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subs")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n"
            f"–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã: {', '.join(not_subscribed_channels)}",
            reply_markup=reply_markup
        )

# ========== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ==========
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    if query.data == "check_subs":
        user = query.from_user
        is_subscribed = True
        not_subscribed_channels = []
        
        for channel_name, channel_id in channels_to_subscribe.items():
            try:
                chat_member = await context.bot.get_chat_member(chat_id=channel_id, user_id=user.id)
                if chat_member.status in ["left", "kicked"]:
                    is_subscribed = False
                    not_subscribed_channels.append(channel_name)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞ {channel_name}: {e}")
                is_subscribed = False
                not_subscribed_channels.append(channel_name)

        if is_subscribed:
            keyboard = [
                [InlineKeyboardButton("üîê –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", url=PRIVATE_CHANNEL_LINK)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª:",
                reply_markup=reply_markup
            )
        else:
            await query.answer(
                f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞: {', '.join(not_subscribed_channels)}", 
                show_alert=True
            )

# ========== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ==========
async def add_channel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != admin_id:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return

    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addchannel –ù–∞–∑–≤–∞–Ω–∏–µ @username_or_id")
        return

    channel_name = " ".join(context.args[:-1])
    channel_id = context.args[-1]
    
    try:
        channel_id = int(channel_id)
    except ValueError:
        pass
    
    channels_to_subscribe[channel_name] = channel_id
    await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª '{channel_name}' –¥–æ–±–∞–≤–ª–µ–Ω")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != admin_id:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    message = " ".join(context.args)
    await update.message.reply_text(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞: {message}")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("addchannel", add_channel))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CallbackQueryHandler(button))
    
    application.run_polling()

if __name__ == "__main__":
    main()
