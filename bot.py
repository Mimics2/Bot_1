import logging
import sqlite3
import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))  # –í–∞—à ID –≤ Telegram

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è Railway
DB_PATH = os.path.join(os.path.dirname(__file__), "bot.db")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class Database:
    def __init__(self, db_path):
        self.db_path = db_path
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—É—Ç–∏: {db_path}")
        self.init_db()

    def init_db(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    full_name TEXT,
                    joined_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–∏ –ø—É–±–ª–∏—á–Ω—ã–µ, –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ)
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS subscription_channels (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    channel_username TEXT,
                    channel_url TEXT,
                    channel_name TEXT,
                    channel_type TEXT DEFAULT 'public', -- 'public' –∏–ª–∏ 'private'
                    added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞–º–∏ (–∫–∞–Ω–∞–ª—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS referral_channels (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    channel_url TEXT NOT NULL,
                    channel_name TEXT,
                    added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    def add_user(self, user_id, username, full_name):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR IGNORE INTO users (user_id, username, full_name)
                VALUES (?, ?, ?)
            ''', (user_id, username, full_name))
            conn.commit()
            conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    def get_user(self, user_id):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
            user = cursor.fetchone()
            conn.close()
            return user
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—É–±–ª–∏—á–Ω—ã–µ –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ)
    def add_subscription_channel(self, channel_username, channel_url, channel_name, channel_type='public'):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO subscription_channels 
                (channel_username, channel_url, channel_name, channel_type)
                VALUES (?, ?, ?, ?)
            ''', (channel_username, channel_url, channel_name, channel_type))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    def remove_subscription_channel(self, channel_id):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('DELETE FROM subscription_channels WHERE id = ?', (channel_id,))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    def get_subscription_channels(self):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM subscription_channels ORDER BY id')
            channels = cursor.fetchall()
            conn.close()
            return channels
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return []

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞–º–∏ (–∫–∞–Ω–∞–ª—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
    def add_referral_channel(self, channel_url, channel_name):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO referral_channels (channel_url, channel_name)
                VALUES (?, ?)
            ''', (channel_url, channel_name))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∫–æ–π: {e}")
            return False

    def remove_referral_channel(self, channel_id):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('DELETE FROM referral_channels WHERE id = ?', (channel_id,))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∫–æ–π: {e}")
            return False

    def get_referral_channels(self):
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM referral_channels ORDER BY id')
            channels = cursor.fetchall()
            conn.close()
            return channels
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞–º–∏: {e}")
            return []

    def get_all_users(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT user_id FROM users')
            users = cursor.fetchall()
            conn.close()
            return users
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    db = Database(DB_PATH)
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    db = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if db is None:
        await update.message.reply_text("üö´ –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
        
    user = update.effective_user
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    db.add_user(
        user_id=user.id,
        username=user.username,
        full_name=user.full_name
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
    subscription_status = await check_subscriptions(update, context)
    
    if subscription_status["all_subscribed"]:
        await show_success_message(update, context)
    else:
        await show_subscription_request(update, context, subscription_status["missing_channels"])

async def check_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    bot = context.bot
    channels = db.get_subscription_channels()
    
    result = {
        "all_subscribed": True,
        "missing_channels": []
    }
    
    if not channels:
        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        return result
    
    for channel in channels:
        channel_id, channel_username, channel_url, channel_name, channel_type, _ = channel
        
        if channel_type == 'public':
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            try:
                # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
                clean_username = channel_username.lstrip('@')
                
                chat_member = await bot.get_chat_member(
                    chat_id=f"@{clean_username}",
                    user_id=user.id
                )
                subscribed = chat_member.status in ['member', 'administrator', 'creator']
                
                if not subscribed:
                    result["all_subscribed"] = False
                    result["missing_channels"].append({
                        "name": channel_name,
                        "type": "public",
                        "url": f"https://t.me/{clean_username}"
                    })
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel_username}: {e}")
                result["all_subscribed"] = False
                result["missing_channels"].append({
                    "name": channel_name,
                    "type": "public",
                    "url": f"https://t.me/{clean_username}"
                })
        
        elif channel_type == 'private':
            # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—Ä—É—á–Ω—É—é –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å)
            result["all_subscribed"] = False
            result["missing_channels"].append({
                "name": channel_name,
                "type": "private",
                "url": channel_url
            })
    
    return result

async def show_success_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    referral_channels = db.get_referral_channels()
    
    if not referral_channels:
        message = "‚ú® –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã"
        if update.callback_query:
            await update.callback_query.edit_message_text(message)
        else:
            await update.message.reply_text(message)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    channel = referral_channels[0]
    channel_id, channel_url, channel_name, _ = channel
    
    text = f"""
üéâ **–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!**

üíé **–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:**
{channel_url}

‚ö° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏
    """
    
    keyboard = [
        [InlineKeyboardButton(f"üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ {channel_name}", url=channel_url)],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs")]
    ]
    
    if update.effective_user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_subscription_request(update: Update, context: ContextTypes.DEFAULT_TYPE, missing_channels=None):
    channels = db.get_subscription_channels()
    
    if not channels:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await show_success_message(update, context)
        return
    
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    for channel_info in missing_channels:
        if channel_info["type"] == "public":
            keyboard.append([
                InlineKeyboardButton(
                    f"üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel_info['name']}",
                    url=channel_info["url"]
                )
            ])
        elif channel_info["type"] == "private":
            keyboard.append([
                InlineKeyboardButton(
                    f"üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ {channel_info['name']}",
                    url=channel_info["url"]
                )
            ])
    
    keyboard.append([InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subs")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if missing_channels:
        public_channels = [ch["name"] for ch in missing_channels if ch["type"] == "public"]
        private_channels = [ch["name"] for ch in missing_channels if ch["type"] == "private"]
        
        text = "üìã **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:**\n\n"
        
        if public_channels:
            text += f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã: **{', '.join(public_channels)}**\n"
        
        if private_channels:
            text += f"‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª–∞–º: **{', '.join(private_channels)}**\n"
        
        text += "\nüëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ"
    else:
        text = "üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    if query.data == "check_subs":
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        db.add_user(
            user_id=user.id,
            username=user.username,
            full_name=user.full_name
        )
        
        subscription_status = await check_subscriptions(update, context)
        
        if subscription_status["all_subscribed"]:
            await show_success_message(update, context)
        else:
            await show_subscription_request(update, context, subscription_status["missing_channels"])
    
    elif query.data == "admin_panel":
        if update.effective_user.id == ADMIN_ID:
            await show_admin_panel(update, context)

    elif query.data == "manage_subscription_channels":
        if update.effective_user.id == ADMIN_ID:
            await show_manage_subscription_channels(update, context)

    elif query.data == "manage_referral_channels":
        if update.effective_user.id == ADMIN_ID:
            await show_manage_referral_channels(update, context)

    elif query.data == "add_public_channel":
        if update.effective_user.id == ADMIN_ID:
            context.user_data['awaiting_channel'] = True
            context.user_data['channel_type'] = 'public'
            await query.edit_message_text(
                "‚ûï **–î–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`@username –ù–∞–∑–≤–∞–Ω–∏–µ`\n\n"
                "**–ü—Ä–∏–º–µ—Ä:**\n"
                "`@my_channel –ú–æ–π –∫–∞–Ω–∞–ª`",
                parse_mode='Markdown'
            )

    elif query.data == "add_private_channel":
        if update.effective_user.id == ADMIN_ID:
            context.user_data['awaiting_channel'] = True
            context.user_data['channel_type'] = 'private'
            await query.edit_message_text(
                "‚ûï **–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`—Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ`\n\n"
                "**–ü—Ä–∏–º–µ—Ä:**\n"
                "`https://t.me/my_channel –ú–æ–π –∫–∞–Ω–∞–ª`",
                parse_mode='Markdown'
            )

    elif query.data == "add_referral_channel":
        if update.effective_user.id == ADMIN_ID:
            context.user_data['awaiting_channel'] = True
            context.user_data['channel_type'] = 'referral'
            await query.edit_message_text(
                "üíé **–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`—Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ`\n\n"
                "**–ü—Ä–∏–º–µ—Ä:**\n"
                "`https://t.me/final_channel –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª`",
                parse_mode='Markdown'
            )

    elif query.data.startswith("delete_subscription_channel_"):
        if update.effective_user.id == ADMIN_ID:
            channel_id = int(query.data.replace("delete_subscription_channel_", ""))
            channel = None
            channels = db.get_subscription_channels()
            for ch in channels:
                if ch[0] == channel_id:
                    channel = ch
                    break
            
            if channel and db.remove_subscription_channel(channel_id):
                await query.edit_message_text(f"‚úÖ –ö–∞–Ω–∞–ª {channel[3]} —É–¥–∞–ª–µ–Ω!")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!")
            await show_manage_subscription_channels(update, context)

    elif query.data.startswith("delete_referral_channel_"):
        if update.effective_user.id == ADMIN_ID:
            channel_id = int(query.data.replace("delete_referral_channel_", ""))
            channel = None
            channels = db.get_referral_channels()
            for ch in channels:
                if ch[0] == channel_id:
                    channel = ch
                    break
            
            if channel and db.remove_referral_channel(channel_id):
                await query.edit_message_text(f"‚úÖ –ö–∞–Ω–∞–ª {channel[2]} —É–¥–∞–ª–µ–Ω!")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!")
            await show_manage_referral_channels(update, context)

    elif query.data == "back_to_admin":
        if update.effective_user.id == ADMIN_ID:
            await show_admin_panel(update, context)

    elif query.data == "back_to_main":
        await show_success_message(update, context)

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if db is None:
        await update.callback_query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
        
    total_users = len(db.get_all_users())
    subscription_channels = db.get_subscription_channels()
    referral_channels = db.get_referral_channels()
    
    public_count = len([ch for ch in subscription_channels if ch[4] == 'public'])
    private_count = len([ch for ch in subscription_channels if ch[4] == 'private'])
    
    text = f"""
‚öôÔ∏è **–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ üì∫ –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(subscription_channels)}
  ‚îú –ü—É–±–ª–∏—á–Ω—ã–µ: {public_count}
  ‚îî –ü–æ —Å—Å—ã–ª–∫–µ: {private_count}
‚Ä¢ üíé –§–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(referral_channels)}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
    """
    
    keyboard = [
        [InlineKeyboardButton("üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", callback_data="manage_subscription_channels")],
        [InlineKeyboardButton("üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="manage_referral_channels")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_manage_subscription_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channels = db.get_subscription_channels()
    
    text = "üì∫ **–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n"
    
    if channels:
        for channel in channels:
            channel_id, channel_username, channel_url, channel_name, channel_type, _ = channel
            if channel_type == 'public':
                text += f"‚Ä¢ üìπ {channel_name} (@{channel_username})\n"
            else:
                text += f"‚Ä¢ üîó {channel_name}\n"
    else:
        text += "‚ÑπÔ∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="add_public_channel")],
        [InlineKeyboardButton("‚ûï –ö–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ", callback_data="add_private_channel")]
    ]
    
    # –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    for channel in channels:
        channel_id, channel_username, channel_url, channel_name, channel_type, _ = channel
        keyboard.append([
            InlineKeyboardButton(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {channel_name}", callback_data=f"delete_subscription_channel_{channel[0]}")
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_manage_referral_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channels = db.get_referral_channels()
    
    text = "üíé **–§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏):**\n\n"
    
    if channels:
        for channel in channels:
            text += f"‚Ä¢ {channel[2]}\n"
    else:
        text += "‚ÑπÔ∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="add_referral_channel")]
    ]
    
    # –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    for channel in channels:
        keyboard.append([
            InlineKeyboardButton(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {channel[2]}", callback_data=f"delete_referral_channel_{channel[0]}")
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
        
    if context.user_data.get('awaiting_channel'):
        channel_type = context.user_data.get('channel_type')
        
        try:
            text = update.message.text.strip()
            
            if channel_type == 'public':
                # –§–æ—Ä–º–∞—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: @username –ù–∞–∑–≤–∞–Ω–∏–µ
                if text.startswith('@'):
                    parts = text.split(' ', 1)
                    if len(parts) == 2:
                        channel_username = parts[0]
                        channel_name = parts[1]
                        
                        if db.add_subscription_channel(channel_username, f"https://t.me/{channel_username.lstrip('@')}", channel_name, 'public'):
                            await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª {channel_name} –¥–æ–±–∞–≤–ª–µ–Ω!")
                        else:
                            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏!")
                    else:
                        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `@username –ù–∞–∑–≤–∞–Ω–∏–µ`", parse_mode='Markdown')
                else:
                    await update.message.reply_text("‚ùå Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @")
                
                context.user_data['awaiting_channel'] = False
                await show_manage_subscription_channels(update, context)
                
            elif channel_type == 'private':
                # –§–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ: —Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ
                parts = text.split(' ', 1)
                if len(parts) == 2:
                    channel_url = parts[0]
                    channel_name = parts[1]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–∞–ª–∏–¥–Ω–∞—è
                    if channel_url.startswith('http://') or channel_url.startswith('https://') or channel_url.startswith('t.me/'):
                        if db.add_subscription_channel(None, channel_url, channel_name, 'private'):
                            await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª {channel_name} –¥–æ–±–∞–≤–ª–µ–Ω!")
                        else:
                            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏!")
                    else:
                        await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http://, https:// –∏–ª–∏ t.me/")
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `—Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ`")
                
                context.user_data['awaiting_channel'] = False
                await show_manage_subscription_channels(update, context)
                
            elif channel_type == 'referral':
                # –§–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: —Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ
                parts = text.split(' ', 1)
                if len(parts) == 2:
                    channel_url = parts[0]
                    channel_name = parts[1]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–∞–ª–∏–¥–Ω–∞—è
                    if channel_url.startswith('http://') or channel_url.startswith('https://') or channel_url.startswith('t.me/'):
                        if db.add_referral_channel(channel_url, channel_name):
                            await update.message.reply_text(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª {channel_name} –¥–æ–±–∞–≤–ª–µ–Ω!")
                        else:
                            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏!")
                    else:
                        await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http://, https:// –∏–ª–∏ t.me/")
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `—Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ`")
                
                context.user_data['awaiting_channel'] = False
                await show_manage_referral_channels(update, context)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            context.user_data['awaiting_channel'] = False

async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    subscription_status = await check_subscriptions(update, context)
    
    if subscription_status["all_subscribed"]:
        await show_success_message(update, context)
    else:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã!")
        await show_subscription_request(update, context, subscription_status["missing_channels"])

async def set_commands(application: Application):
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("check", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    ]
    await application.bot.set_my_commands(commands)

def main():
    if db is None:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return
        
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("check", check_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    application.post_init = set_commands
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()
