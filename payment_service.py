# payment_service.py

import json
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes
# üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from config import logger, SECRET_ACCESS_CODE, ACCESS_PRICE_DISPLAY 

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –•–†–ê–ù–ò–õ–ò–©–ê ---
USERS_DATA_FILE = 'users_data.json'
TRIAL_DURATION_DAYS = 365 

# --- –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò (JSON) ---

def load_users_data() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        with open(USERS_DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_users_data(data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ JSON-—Ñ–∞–π–ª."""
    try:
        with open(USERS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ {USERS_DATA_FILE}: {e}")

# üî• –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
USERS_DATA = load_users_data() 

def activate_pro_access(user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É —Å PRO-—Ç–∞—Ä–∏—Ñ–æ–º."""
    user_id_str = str(user_id)
    start_date = datetime.now()
    expiration_date = start_date + timedelta(days=TRIAL_DURATION_DAYS)

    USERS_DATA[user_id_str] = {
        'telegram_id': user_id,
        'tariff_name': 'PRO-TRIAL', 
        'expiration_date': expiration_date.strftime("%Y-%m-%d"),
        'generations_left': -1 # –ë–µ–∑–ª–∏–º–∏—Ç
    }
    save_users_data(USERS_DATA)

async def check_access(user_id: int, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø."""
    user_id_str = str(user_id)
    
    if user_id_str in USERS_DATA:
        user_info = USERS_DATA[user_id_str]
        
        expiration_date_str = user_info.get('expiration_date')
        if expiration_date_str:
            expiration_date = datetime.strptime(expiration_date_str, "%Y-%m-%d")
            if expiration_date >= datetime.now(): 
                return True
            else:
                # –°—Ä–æ–∫ –∏—Å—Ç–µ–∫
                del USERS_DATA[user_id_str]
                save_users_data(USERS_DATA)
        else: 
            return True # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã, —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º (–±–µ—Å—Å—Ä–æ—á–Ω—ã–π)
        
    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    await update.message.reply_text(
        "üîí **–î–û–°–¢–£–ü –û–ì–†–ê–ù–ò–ß–ï–ù.**\n"
        f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PRO-—Ñ—É–Ω–∫—Ü–∏–π (Gemini) —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è.\n"
        f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –≤–≤–µ–¥–∏—Ç–µ **—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥** (–¶–µ–Ω–∞: {ACCESS_PRICE_DISPLAY}).",
        parse_mode='Markdown'
    )
    return False

# üî• –£–î–ê–õ–ï–ù–û: handle_access_code - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ handlers.py –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã ConversationHandler.
