# payment_service.py

import json
from datetime import datetime, timedelta

from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç CHOOSING_ACTION –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
from config import logger, SECRET_ACCESS_CODE, ACCESS_PRICE_DISPLAY, CHOOSING_ACTION 

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –•–†–ê–ù–ò–õ–ò–©–ê ---
USERS_DATA_FILE = 'users_data.json'
TRIAL_DURATION_DAYS = 365 
TRIAL_GENERATION_LIMIT = -1 # -1 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç

# --- –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò (JSON) ---

def load_users_data() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        with open(USERS_DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        with open(USERS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump({}, f)
        return {}

def save_users_data(data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ JSON-—Ñ–∞–π–ª."""
    try:
        with open(USERS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ {USERS_DATA_FILE}: {e}")

USERS_DATA = load_users_data() # üî• –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

def activate_pro_access(user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É —Å PRO-—Ç–∞—Ä–∏—Ñ–æ–º."""
    user_id_str = str(user_id)
    
    start_date = datetime.now()
    expiration_date = start_date + timedelta(days=TRIAL_DURATION_DAYS)

    USERS_DATA[user_id_str] = {
        'telegram_id': user_id,
        'tariff_name': 'PRO-TRIAL', 
        'tariff_duration': TRIAL_DURATION_DAYS,
        'generations_left': TRIAL_GENERATION_LIMIT,
        'start_date': start_date.strftime("%Y-%m-%d"),
        'expiration_date': expiration_date.strftime("%Y-%m-%d"),
    }
    save_users_data(USERS_DATA)
    logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω PRO-–¥–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ {expiration_date.strftime('%Y-%m-%d')}.")


async def check_access(user_id: int, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø."""
    
    user_id_str = str(user_id)
    
    if user_id_str in USERS_DATA:
        user_info = USERS_DATA[user_id_str]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        expiration_date_str = user_info.get('expiration_date')
        if expiration_date_str:
            expiration_date = datetime.strptime(expiration_date_str, "%Y-%m-%d")
            if expiration_date < datetime.now():
                # –°—Ä–æ–∫ –∏—Å—Ç–µ–∫
                del USERS_DATA[user_id_str]
                save_users_data(USERS_DATA)
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ (–µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if user_id_str in USERS_DATA:
            generations_left = USERS_DATA[user_id_str].get('generations_left', 0)
            
            if generations_left == -1 or generations_left > 0:
                # –ï—Å–ª–∏ –±–µ–∑–ª–∏–º–∏—Ç (-1) –∏–ª–∏ –µ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                return True 
        
    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–¥
    await update.message.reply_text(
        "üîí **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.**\n"
        f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PRO-—Ñ—É–Ω–∫—Ü–∏–π CopiBot (Gemini) —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è.\n"
        f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –≤–≤–µ–¥–∏—Ç–µ **—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥** –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–¶–µ–Ω–∞: {ACCESS_PRICE_DISPLAY}).",
        parse_mode='Markdown'
    )
    return False


async def handle_access_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–∞—Ä–∏—Ñ."""
    
    user_input = update.message.text.strip().upper() 
    user_id = update.effective_user.id
    
    if user_input == SECRET_ACCESS_CODE.upper():
        # –ö–æ–¥ –≤–µ—Ä–µ–Ω: –¥–∞–µ–º –¥–æ—Å—Ç—É–ø –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        activate_pro_access(user_id)
        await update.message.reply_text(
            "ü•≥ **–ü–û–ó–î–†–ê–í–õ–Ø–Æ! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.**\n"
            f"–£ –≤–∞—Å **–ë–ï–ó–õ–ò–ú–ò–¢–ù–´–ô** –¥–æ—Å—Ç—É–ø –Ω–∞ **{TRIAL_DURATION_DAYS}** –¥–Ω–µ–π.\n"
            "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove()
        )
        return CHOOSING_ACTION
        
    else:
        # –ö–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω
        await update.message.reply_text(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑. "
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."
        )
        return GETTING_ACCESS_CODE
