# payment_service.py

import json
from datetime import datetime, timedelta

from telegram import Update
from telegram.ext import ContextTypes
# –ò–º–ø–æ—Ä—Ç CHOOSING_ACTION –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ —Ö—ç–Ω–¥–ª–µ—Ä–∞ –∫–æ–¥–∞
from config import logger, SECRET_ACCESS_CODE, ACCESS_PRICE_DISPLAY, CHOOSING_ACTION 

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –•–†–ê–ù–ò–õ–ò–©–ê ---
USERS_DATA_FILE = 'users_data.json'
# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ê–†–ò–§–û–í ---
TRIAL_DURATION_DAYS = 30
TRIAL_GENERATION_LIMIT = -1 # -1 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç (–¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞)

# --- –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ---

def load_users_data() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        with open(USERS_DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        logger.warning(f"–§–∞–π–ª {USERS_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π.")
        with open(USERS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump({}, f)
        return {}
    except json.JSONDecodeError:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –∏–∑ {USERS_DATA_FILE}. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
        return {}
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def save_users_data(data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ JSON-—Ñ–∞–π–ª."""
    try:
        with open(USERS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ {USERS_DATA_FILE}: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –º–æ–¥—É–ª—è
USERS_DATA = load_users_data()

def activate_trial_access(user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É —Å PRO-—Ç–∞—Ä–∏—Ñ–æ–º –Ω–∞ 30 –¥–Ω–µ–π."""
    user_id_str = str(user_id)
    
    start_date = datetime.now()
    expiration_date = start_date + timedelta(days=TRIAL_DURATION_DAYS)

    USERS_DATA[user_id_str] = {
        'telegram_id': user_id,
        'tariff_name': 'PRO-TRIAL', 
        'tariff_duration': TRIAL_DURATION_DAYS,
        'generations_left': TRIAL_GENERATION_LIMIT, # -1 –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞
        'start_date': start_date.strftime("%Y-%m-%d"),
        'expiration_date': expiration_date.strftime("%Y-%m-%d"),
    }
    save_users_data(USERS_DATA)
    logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω PRO-–¥–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ {expiration_date.strftime('%Y-%m-%d')}.")


async def check_access(user_id: int, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø (–¥–∞—Ç–∞ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç—ã)."""
    
    user_id_str = str(user_id)
    
    if user_id_str in USERS_DATA:
        user_info = USERS_DATA[user_id_str]
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        expiration_date_str = user_info.get('expiration_date')
        if expiration_date_str:
            expiration_date = datetime.strptime(expiration_date_str, "%Y-%m-%d")
            if expiration_date < datetime.now():
                # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –£–¥–∞–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.
                del USERS_DATA[user_id_str]
                save_users_data(USERS_DATA)
                logger.info(f"–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫ –∏ —É–¥–∞–ª–µ–Ω.")
                
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ (–ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ —Å—Ä–æ–∫—É)
        if user_id_str in USERS_DATA:
            generations_left = USERS_DATA[user_id_str]['generations_left']
            
            # –î–æ—Å—Ç—É–ø –µ—Å—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –±–µ–∑–ª–∏–º–∏—Ç (-1) –ò–õ–ò –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –æ—Å—Ç–∞–ª–æ—Å—å > 0.
            if generations_left == -1 or generations_left > 0:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ (–µ—Å–ª–∏ –ª–∏–º–∏—Ç –µ—Å—Ç—å)
                if generations_left > 0:
                    await update.message.reply_text(f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å **{generations_left}** –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.")
                return True # –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω
        
    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç (–Ω–µ—Ç –≤ –±–∞–∑–µ, –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
    await update.message.reply_text(
        "üîí **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.**\n"
        f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PRO-—Ñ—É–Ω–∫—Ü–∏–π CopiBot (Gemini) —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è.\n"
        f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –≤–≤–µ–¥–∏—Ç–µ **—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥** –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–¶–µ–Ω–∞: {ACCESS_PRICE_DISPLAY}).",
        parse_mode='Markdown'
    )
    return False


async def handle_access_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–∞—Ä–∏—Ñ."""
    
    user_input = update.message.text.strip().upper() 
    user_id = update.effective_user.id
    
    if user_input == SECRET_ACCESS_CODE.upper():
        # –ö–æ–¥ –≤–µ—Ä–µ–Ω: –¥–∞–µ–º –¥–æ—Å—Ç—É–ø –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        activate_trial_access(user_id)
        await update.message.reply_text(
            "ü•≥ **–ü–û–ó–î–†–ê–í–õ–Ø–Æ! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.**\n"
            f"–£ –≤–∞—Å **–ë–ï–ó–õ–ò–ú–ò–¢–ù–´–ô** –¥–æ—Å—Ç—É–ø –Ω–∞ **{TRIAL_DURATION_DAYS}** –¥–Ω–µ–π.\n"
            "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
            parse_mode='Markdown'
        )
        return CHOOSING_ACTION
        
    else:
        # –ö–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω
        await update.message.reply_text(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑. "
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."
        )
        return -1
